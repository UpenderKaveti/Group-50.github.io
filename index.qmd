---
title: "Customer Segementaion and Recomendation"
author: "Group 50"
format: revealjs
editor: source
toc: true
toc-depth: 1
slide-number: true
smaller: true
scrollable: true 
execute:
  echo: true
editor_options: 
  chunk_output_type: console
---
## Loading data
```{r}
project_data = read.csv("C:\\Users\\sai krishna\\Documents\\Online Retail.csv")

print(project_data)
```
## summary of data
```{r}
summary(project_data)
```
## Remove rows with NaN values
```{r}
nan_rows <- rowSums(is.na(project_data)) > 0

retail_data <- project_data[!nan_rows, ]

print(retail_data)
```

## total items
```{r}
distinct_elements <- unique(retail_data$StockCode)
num_distinct_elements <- length(distinct_elements)
print(num_distinct_elements)
# total items
```

## total Country
```{r}
distinct_elements <- unique(retail_data$Country)
num_distinct_elements <- length(distinct_elements)
print(num_distinct_elements)
# total Country
```
## total Customers
```{r}
distinct_elements <- unique(retail_data$CustomerID)
num_distinct_elements <- length(distinct_elements)
print(num_distinct_elements)
# total Customers
```

## RFM Analysis

RFM Analysis: Calculate Recency, Frequency, and Monetary (RFM) values for each customer based on their purchase history.
Recency: How recently a customer made a purchase.
Frequency: How often a customer makes a purchase.
Monetary: How much money a customer spends.
```{r}
library(dplyr)

# Step 1: Calculate Recency

retail_data$InvoiceDate <- as.POSIXct(retail_data$InvoiceDate, format = "%m/%d/%Y %H:%M")
latest_date <- max(retail_data$InvoiceDate)
recency_data <- retail_data %>%
  group_by(CustomerID) %>%
  summarize(Recency = as.numeric(difftime(latest_date, max(InvoiceDate), units = "days")))
print(recency_data)
```

## RFM Analysis
```{r}
library(dplyr)

# Step 2: Calculate Frequency
# Count the number of transactions (invoices) for each customer
frequency_data <- retail_data %>%
  group_by(CustomerID) %>%
  summarize(Frequency = n_distinct(InvoiceNo))

# Step 3: Calculate Monetary
# Calculate the total amount spent (Monetary) for each customer
monetary_data <- retail_data %>%
  group_by(CustomerID) %>%
  summarize(Monetary = sum(Quantity * UnitPrice))

rfm_data <- merge(recency_data, frequency_data, by = "CustomerID")
rfm_data <- merge(rfm_data, monetary_data, by = "CustomerID")
```

## Merge RFM dataframes into a single dataframe
```{r}
library(dplyr)
library(tidyr)

rfm_data <- recency_data %>%
  inner_join(frequency_data, by = "CustomerID") %>%
  inner_join(monetary_data, by = "CustomerID")

scaled_rfm_data <- rfm_data %>%
  mutate(
    Recency_scaled = scale(Recency),
    Frequency_scaled = scale(Frequency),
    Monetary_scaled = scale(Monetary)
  ) %>%
  select(CustomerID, Recency_scaled, Frequency_scaled, Monetary_scaled)

print(scaled_rfm_data)
```


## kmeans
```{r}
library(ggplot2)

wcss <- vector()
k_values <- 1:10  

for (k in k_values) {
  kmeans_model <- kmeans(scaled_rfm_data[, -1], centers = k)
  wcss[k] <- kmeans_model$tot.withinss
}

elbow_plot <- data.frame(K = k_values, WCSS = wcss) %>%
  ggplot(aes(x = K, y = WCSS)) +
  geom_line(color = "blue") +
  geom_point(color = "red", size = 2) +
  labs(title = "Elbow Method for Optimal K",
       x = "Number of Clusters (K)",
       y = "Within-Cluster Sum of Squares (WCSS)") +
  theme_minimal()

print(elbow_plot)

# Look for the point where the decrease in WCSS starts to diminish
```
## kmeans

k = 6

```{r}
set.seed(123)

kmeans_model <- kmeans(scaled_rfm_data[, -1], centers = 6)

cluster_labels <- kmeans_model$cluster

scaled_rfm_data_with_clusters <- cbind(scaled_rfm_data, Cluster = cluster_labels)

head(scaled_rfm_data_with_clusters)
```
## kmeans
```{r}
clustered_rfm_data <- cbind(scaled_rfm_data, Cluster = cluster_labels)

cluster_summary <- clustered_rfm_data %>%
  group_by(Cluster) %>%
  summarize(
    Avg_Recency = mean(Recency_scaled),
    Avg_Frequency = mean(Frequency_scaled),
    Avg_Monetary = mean(Monetary_scaled),
    Count_Customers = n()
  )

cluster_summary$Cluster_Label <- cutree(hclust(dist(cluster_summary[, -5])), 6)
print(cluster_summary)
```
The output provided appears to be a summary of cluster characteristics resulting from K-means clustering. Let's break down what each column represents:

- **Cluster**: An integer indicating the cluster number.
- **Avg_Recency**: Average standardized recency value for the customers within the cluster. It represents how recently, on average, customers in this cluster made a purchase. Positive values indicate higher recency compared to the overall dataset mean, while negative values indicate lower recency.
- **Avg_Frequency**: Average standardized frequency value for the customers within the cluster. It represents how frequently, on average, customers in this cluster make purchases. Positive values indicate higher frequency compared to the overall dataset mean, while negative values indicate lower frequency.
- **Avg_Monetary**: Average standardized monetary value for the customers within the cluster. It represents the average monetary value of purchases made by customers in this cluster. Positive values indicate higher monetary spending compared to the overall dataset mean, while negative values indicate lower monetary spending.
- **Count_Customers**: The number of customers assigned to the cluster.
- **Cluster_Label**: An integer representing the label assigned to the cluster. It seems that labels have been assigned based on hierarchical clustering, as mentioned earlier.

For interpretation:

- Cluster 1: Moderate recency, low frequency, low monetary value. This cluster has a moderate number of customers.
- Cluster 2: Low recency, high frequency, very high monetary value. This cluster has only a few customers but they make high-frequency purchases with substantial monetary value.
- Cluster 3: Low recency, low frequency, low monetary value. This cluster has a large number of customers who make infrequent and low-value purchases.
- Cluster 4: Low recency, very high frequency, moderate monetary value. This cluster has a small number of customers who make very frequent purchases with moderate monetary value.
- Cluster 5: Moderate recency, low frequency, low monetary value. This cluster has a moderate number of customers similar to Cluster 1.
- Cluster 6: Low recency, high frequency, high monetary value. This cluster has a moderate number of customers who make frequent purchases with relatively high monetary value.

## kmeans
```{r}
# Assuming 'scaled_rfm_data' contains the scaled RFM values and 'kmeans_model' contains the fitted K-means model

# Calculate WCSS
wcss <- kmeans_model$tot.withinss

# Print WCSS
print(paste("WCSS:", wcss))

```
## kmeans
```{r}
print(cluster_summary)
```
## Association
```{r}
library(arules)
library(dplyr)

customer_purchases <- retail_data %>%
                      group_by(CustomerID) %>%
                      summarize(Unique_Purchases = paste(unique(StockCode), collapse = ", "))

transactions_list <- strsplit(customer_purchases$Unique_Purchases, ", ")
transactions <- as(transactions_list, "transactions")

# Mine association rules from the transactions using the Apriori algorithm
rule1 <- apriori(transactions, parameter = list(support = 0.05, confidence = 0.7))

rule2 <- apriori(transactions, parameter = list(support = 0.05, confidence = 0.7, minlen=3))
```
## Rule1
```{r}
inspect(head(rule1,5))
```

## Rule2
```{r}
inspect(head(rule2,5))
```
## Plots
```{r}
library(arulesViz)

plot(rule1)
```
## Plots
```{r}
plot(rule2)
```
## Plots
```{r}
plot(rule1, method = "grouped", engine = "html")
```

## Plots
```{r}
plot(rule1, method = "matrix", engine = "html") 
```



## Thank You ....


